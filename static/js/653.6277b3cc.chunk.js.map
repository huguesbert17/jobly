{"version":3,"file":"static/js/653.6277b3cc.chunk.js","mappings":"kKA8EA,UArEyB,SAACA,GAAW,IAADC,EAChCC,GAAwBC,EAAAA,EAAAA,YAAeC,GAAAC,EAAAA,EAAAA,GAAAH,EAAC,GAAjCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACZI,GAAWC,EAAAA,EAAAA,UACVC,GAAcC,EAAAA,EAAAA,KAAdD,WACAE,GAAQC,EAAAA,EAAAA,YAAWC,EAAAA,GAAnBF,KAEHG,EAAY,WACVf,EAAMgB,SAASC,EAAAA,EAASC,UAAUC,MAAK,SAACC,GAAY,OAAKb,EAAQa,EAAQ,IAC1EpB,EAAMgB,SAASC,EAAAA,EAASI,eAAerB,EAAMgB,SAASG,MAAK,SAACC,GAAY,OAAKb,EAAQa,EAAQ,GACpG,GAGAE,EAAAA,EAAAA,YAAU,WACPP,GACH,GAAG,IAuBH,OAAIT,GACGiB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAkBC,MAAO,CAACC,IAAK,QAAQC,SAAA,EACzDC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,8CAA8CC,MAAO,CAACI,IAAK,OAAOF,UAC7EJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaG,SAAA,EACxBC,EAAAA,EAAAA,KAAA,SAAOE,SAhBE,SAACC,GAClBd,EAAAA,EAASC,QAAQa,EAAEC,OAAOC,OAAOd,MAAK,SAACe,GAAM,OAAK3B,EAAQ2B,EAAE,IACzDlC,EAAMgB,SAASC,EAAAA,EAASI,eAAerB,EAAMgB,QAASe,EAAEC,OAAOC,OAAOd,MAAK,SAACe,GAAM,OAAK3B,EAAQ2B,EAAE,GACxG,EAa2CC,KAAK,OAAOC,IAAK5B,EAAUgB,UAAU,eAAea,YAAY,aAAa,aAAW,aAAa,mBAAiB,YACrJT,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,qBAAoBG,UAC/BC,EAAAA,EAAAA,KAAA,UAAQU,QAbE,WACQ,KAA3B9B,EAAS+B,QAAQN,QACpBhB,EAAAA,EAASC,QAAQV,EAAS+B,QAAQN,OAAOd,MAAK,SAACe,GAAM,OAAK3B,EAAQ2B,EAAE,IACjElC,EAAMgB,SAASC,EAAAA,EAASI,eAAerB,EAAMgB,QAASR,EAAS+B,QAAQN,OAAOd,MAAK,SAACe,GAAM,OAAK3B,EAAQ2B,EAAE,IAChH,EASoDV,UAAU,kBAAkBgB,GAAG,SAASf,MAAO,CAACgB,aAAc,yBAAyBd,SAAC,oBAKpIrB,IAASA,EAAKoC,UAA2B,QAApBzC,EAAIO,EAAS+B,eAAO,IAAAtC,OAAA,EAAhBA,EAAkBgC,SAAUV,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBG,SAAA,EACtFC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kCACJC,EAAAA,EAAAA,KAAA,UAAQJ,UAAU,0BAA0Bc,QAlC1B,WACtB9B,EAAS+B,QAAQN,MAAQ,GACzBlB,GACJ,EA+B+EY,SAAC,oBAG3ErB,EAAKqC,KAAI,SAACC,EAAUC,GACjB,IAAMC,EAAelC,EAAKmC,OAAOC,QAAO,SAACC,GAAM,OAAKA,EAAEC,aAAeN,EAAIJ,GAAGU,UAAU,IACtF,OAAO3B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BG,SAAA,EAChDC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,cAAaG,SAAEiB,EAAIO,SACjC5B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWG,SAAA,EAC1BJ,EAAAA,EAAAA,MAAA,MAAIC,UAAU,aAAYG,SAAA,CAAC,YAAUiB,EAAIQ,gBACzC7B,EAAAA,EAAAA,MAAA,KAAGC,UAAU,YAAWG,SAAA,CAAC,YAAUiB,EAAIS,WACvC9B,EAAAA,EAAAA,MAAA,KAAGC,UAAU,YAAWG,SAAA,CAAC,WAASiB,EAAIU,OAASV,EAAIU,OAAS,MAC5D1B,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,WAAUG,UACrBC,EAAAA,EAAAA,KAAA,UAAQJ,UAAU,kBAAkB+B,SAAUT,EAAQJ,OAAQJ,QAAS,kBAzClEP,EAyCoFa,EAAIJ,QAxCzG9B,EAAWqB,GADK,IAACA,CAyC2F,EAACJ,SAAGmB,EAAQJ,OAA0B,UAAjB,wBAPnEG,EAW9D,QA7BajB,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,GA+BrB,C","sources":["pages/Jobs.tsx"],"sourcesContent":["import React, {FC, Fragment, useContext, useEffect, useRef, useState} from \"react\";\nimport JoblyApi from \"../api\"\nimport AppContext from \"../store/AppContext\";\nimport useAccount from \"../hooks/useAccount\";\n\ninterface IProps {\n    company?: string\n}\n\nconst Jobs: FC<IProps> = (props) => {\n    const [jobs, setJobs] = useState<any>(),\n            inputRef = useRef<any>(),\n            {applyToJob} = useAccount(),\n            {user} = useContext(AppContext)\n\n    const fetchJobs = () => {\n        if(!props.company) JoblyApi.getJobs().then((allJobs: any) => setJobs(allJobs))\n        if(props.company) JoblyApi.getCompanyJobs(props.company).then((allJobs: any) => setJobs(allJobs))\n    }\n\n\n    useEffect(() => {\n       fetchJobs()\n    }, [])\n\n    const handleClearSearch = () => {\n        inputRef.current.value = \"\"\n        fetchJobs()\n    }\n\n    const handleApply = (e: number) => {\n        applyToJob(e)\n    }\n\n    const handleSearch = (e: any) => {\n        JoblyApi.getJobs(e.target.value).then((s: any) => setJobs(s))\n        if(props.company) JoblyApi.getCompanyJobs(props.company, e.target.value).then((s: any) => setJobs(s))\n    }\n\n    const handleClickSearch = () => {\n        if(inputRef.current.value === \"\") return\n        JoblyApi.getJobs(inputRef.current.value).then((s: any) => setJobs(s))\n        if(props.company) JoblyApi.getCompanyJobs(props.company, inputRef.current.value).then((s: any) => setJobs(s))\n    }\n\n\n    if(!jobs) return <></>\n    return <div className=\"row flex-column\" style={{gap: \"1rem\"}}>\n        <div className=\"col-11 col-md-5 mx-auto mb-3 sticky-top p-0\" style={{top: \"5em\"}}>\n            <div className=\"input-group\">\n                <input onChange={handleSearch} type=\"text\" ref={inputRef} className=\"form-control\" placeholder=\"Search job\" aria-label=\"Search job\" aria-describedby=\"sercch\"/>\n                <div className=\"input-group-append\">\n                    <button onClick={handleClickSearch} className=\"btn btn-primary\" id=\"search\" style={{borderRadius: \"0 0.375rem 0.375rem 0\"}}>Search</button>\n                </div>\n            </div>\n        </div>\n\n        {(!(jobs || !jobs.length) && inputRef.current?.value) && <div className=\"text-center mt-3\">\n            <h1>No jobs for this search term</h1>\n            <button className=\"btn btn-inverse-primary\" onClick={handleClearSearch}>Clear search</button>\n        </div>}\n\n        {jobs.map((job: any, index: number) => {\n            const applied: any = user.myJobs.filter((x: any) => x.toString() === job.id.toString())\n            return <div className=\"col-11 col-md-5 mx-auto card\" key={index}>\n                <h5 className=\"card-header\">{job.title}</h5>\n                <div className=\"card-body\">\n                <h5 className=\"card-title\">Company: {job.companyName}</h5>\n                <p className=\"card-text\">Salary: ${job.salary}</p>\n                <p className=\"card-text\">Equity: {job.equity ? job.equity : 0}</p>\n                <div className=\"text-end\">\n                    <button className=\"btn btn-primary\" disabled={applied.length} onClick={() => handleApply(job.id)}>{!applied.length ? \"Apply to job\" : \"Applied\"}</button>\n                </div>\n            </div>\n        </div>\n        })}\n    </div>\n}\nexport default Jobs"],"names":["props","_inputRef$current","_useState","useState","_useState2","_slicedToArray","jobs","setJobs","inputRef","useRef","applyToJob","useAccount","user","useContext","AppContext","fetchJobs","company","JoblyApi","getJobs","then","allJobs","getCompanyJobs","useEffect","_jsxs","className","style","gap","children","_jsx","top","onChange","e","target","value","s","type","ref","placeholder","onClick","current","id","borderRadius","length","map","job","index","applied","myJobs","filter","x","toString","title","companyName","salary","equity","disabled","_Fragment"],"sourceRoot":""}